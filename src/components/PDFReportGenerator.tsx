import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Download, FileText } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import jsPDF from 'jspdf';

interface TaxData {
  income: number;
  deductions: {
    section80C: number;
    section80D: number;
    section80G: number;
    homeLoanInterest: number;
  };
  oldRegimeTax: number;
  newRegimeTax: number;
  recommendation: string;
  savings: number;
}

interface PDFReportGeneratorProps {
  taxData: TaxData;
}

export const PDFReportGenerator = ({ taxData }: PDFReportGeneratorProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const generatePDFReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFillColor(0, 112, 186); // PayPal blue
      pdf.rect(0, 0, pageWidth, 30, 'F');
      
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(20);
      pdf.text('Smart Tax Assistant Report', 20, 20);
      
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(10);
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth - 70, 20);
      
      // Income Summary
      let yPos = 50;
      pdf.setFontSize(16);
      pdf.setTextColor(0, 48, 135);
      pdf.text('Income Summary', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Annual Income: ₹${taxData.income.toLocaleString()}`, 20, yPos);
      
      // Deductions
      yPos += 20;
      pdf.setFontSize(16);
      pdf.setTextColor(0, 48, 135);
      pdf.text('Deductions Claimed', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Section 80C: ₹${taxData.deductions.section80C.toLocaleString()}`, 20, yPos);
      yPos += 10;
      pdf.text(`Section 80D: ₹${taxData.deductions.section80D.toLocaleString()}`, 20, yPos);
      yPos += 10;
      pdf.text(`Section 80G: ₹${taxData.deductions.section80G.toLocaleString()}`, 20, yPos);
      yPos += 10;
      pdf.text(`Home Loan Interest (24): ₹${taxData.deductions.homeLoanInterest.toLocaleString()}`, 20, yPos);
      
      // Tax Comparison
      yPos += 25;
      pdf.setFontSize(16);
      pdf.setTextColor(0, 48, 135);
      pdf.text('Tax Calculation Comparison', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Old Regime Tax: ₹${taxData.oldRegimeTax.toLocaleString()}`, 20, yPos);
      yPos += 10;
      pdf.text(`New Regime Tax: ₹${taxData.newRegimeTax.toLocaleString()}`, 20, yPos);
      
      // Recommendation
      yPos += 20;
      pdf.setFontSize(14);
      pdf.setTextColor(0, 160, 230);
      pdf.text('Recommendation', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      const recommendationLines = pdf.splitTextToSize(taxData.recommendation, pageWidth - 40);
      pdf.text(recommendationLines, 20, yPos);
      yPos += recommendationLines.length * 6;
      
      // Savings
      yPos += 10;
      pdf.setFillColor(230, 255, 230);
      pdf.rect(15, yPos - 5, pageWidth - 30, 20, 'F');
      pdf.setFontSize(14);
      pdf.setTextColor(0, 120, 0);
      pdf.text(`Total Savings: ₹${Math.abs(taxData.savings).toLocaleString()}`, 20, yPos + 8);
      
      // Tax Saving Tips
      yPos += 35;
      pdf.setFontSize(16);
      pdf.setTextColor(0, 48, 135);
      pdf.text('Tax Saving Tips for Next Year', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);
      const tips = [
        '• Maximize 80C investments early in the financial year',
        '• Consider ELSS funds for dual benefit of tax saving and equity exposure',
        '• Plan health insurance premiums for Section 80D benefits',
        '• Keep proper documentation for all deductions claimed',
        '• Review and compare tax regimes annually based on your income structure'
      ];
      
      tips.forEach(tip => {
        pdf.text(tip, 20, yPos);
        yPos += 8;
      });
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by Smart Tax Assistant - For informational purposes only', 20, pageHeight - 10);
      
      // Save the PDF
      pdf.save('tax-report.pdf');
      
      toast({
        title: "PDF Generated",
        description: "Your tax report has been downloaded successfully",
      });
      
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Could not generate PDF report",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Tax Report Summary
            </h3>
            <p className="text-sm text-muted-foreground">Generate comprehensive PDF report</p>
          </div>
          <Button 
            onClick={generatePDFReport}
            disabled={isGenerating}
            className="flex items-center gap-2"
          >
            <Download className="h-4 w-4" />
            {isGenerating ? "Generating..." : "Download PDF"}
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <div>
              <span className="text-sm text-muted-foreground">Annual Income</span>
              <p className="font-semibold">₹{taxData.income.toLocaleString()}</p>
            </div>
            <div>
              <span className="text-sm text-muted-foreground">Total Deductions</span>
              <p className="font-semibold">₹{Object.values(taxData.deductions).reduce((a, b) => a + b, 0).toLocaleString()}</p>
            </div>
          </div>
          
          <div className="space-y-3">
            <div>
              <span className="text-sm text-muted-foreground">Recommended Regime</span>
              <p className="font-semibold">{taxData.recommendation}</p>
            </div>
            <div>
              <span className="text-sm text-muted-foreground">Tax Savings</span>
              <p className="font-semibold text-success">₹{Math.abs(taxData.savings).toLocaleString()}</p>
            </div>
          </div>
        </div>

        <Separator />

        <div className="bg-muted/50 p-4 rounded-lg">
          <h4 className="font-medium mb-2">Report will include:</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Complete income breakdown
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Deduction analysis
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Tax regime comparison
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Personalized recommendations
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Tax saving strategies
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="w-2 h-2 p-0 rounded-full bg-primary"></Badge>
              Next year planning tips
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
};